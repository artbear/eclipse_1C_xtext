/*
* generated by Xtext
*/
package org.xtext.onec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class OneCGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBOMTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVarsParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsXMethodParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//Module returns x::XModule:
		//	{XModule} BOM? variables+=Vars* methods+=XMethod* block=Block?;
		public ParserRule getRule() { return rule; }

		//{XModule} BOM? variables+=Vars* methods+=XMethod* block=Block?
		public Group getGroup() { return cGroup; }

		//{XModule}
		public Action getXModuleAction_0() { return cXModuleAction_0; }

		//BOM?
		public RuleCall getBOMTerminalRuleCall_1() { return cBOMTerminalRuleCall_1; }

		//variables+=Vars*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Vars
		public RuleCall getVariablesVarsParserRuleCall_2_0() { return cVariablesVarsParserRuleCall_2_0; }

		//methods+=XMethod*
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }

		//XMethod
		public RuleCall getMethodsXMethodParserRuleCall_3_0() { return cMethodsXMethodParserRuleCall_3_0; }

		//block=Block?
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextCONTEXTTerminalRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterEmKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cVarKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Vars returns x::XVariables:
		//	context=CONTEXT? => ("Перем" | "Var") variables+=Variable ("," variables+=Variable)* ";"?;
		public ParserRule getRule() { return rule; }

		//context=CONTEXT? => ("Перем" | "Var") variables+=Variable ("," variables+=Variable)* ";"?
		public Group getGroup() { return cGroup; }

		//context=CONTEXT?
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//CONTEXT
		public RuleCall getContextCONTEXTTerminalRuleCall_0_0() { return cContextCONTEXTTerminalRuleCall_0_0; }

		//=> ("Перем" | "Var")
		public Group getGroup_1() { return cGroup_1; }

		//"Перем" | "Var"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"Перем"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterEmKeyword_1_0_0() { return cCyrillicCapitalLetterPeCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterEmKeyword_1_0_0; }

		//"Var"
		public Keyword getVarKeyword_1_0_1() { return cVarKeyword_1_0_1; }

		//variables+=Variable
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }

		//(=> "," variables+=Variable)*
		public Group getGroup_3() { return cGroup_3; }

		//=> ","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_1_0() { return cVariablesVariableParserRuleCall_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class XMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XMethod returns x::XMethod:
		//	Func | Proc;
		public ParserRule getRule() { return rule; }

		//Func | Proc
		public Alternatives getAlternatives() { return cAlternatives; }

		//Func
		public RuleCall getFuncParserRuleCall_0() { return cFuncParserRuleCall_0; }

		//Proc
		public RuleCall getProcParserRuleCall_1() { return cProcParserRuleCall_1; }
	}

	public class FuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Func");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextCONTEXTTerminalRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cRetValAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cRetValCyrillicCapitalLetterEfCyrillicSmallLetterUCyrillicSmallLetterEnCyrillicSmallLetterKaCyrillicSmallLetterTseCyrillicSmallLetterICyrillicSmallLetterYaKeyword_1_0_0_0 = (Keyword)cRetValAssignment_1_0_0.eContents().get(0);
		private final Assignment cRetValAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cRetValFunctionKeyword_1_0_1_0 = (Keyword)cRetValAssignment_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParamsParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPublicAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final Keyword cPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_6_0_0 = (Keyword)cPublicAssignment_6_0.eContents().get(0);
		private final Assignment cPublicAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final Keyword cPublicExportKeyword_6_1_0 = (Keyword)cPublicAssignment_6_1.eContents().get(0);
		private final Assignment cVariablesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariablesVarsParserRuleCall_7_0 = (RuleCall)cVariablesAssignment_7.eContents().get(0);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_9_0 = (Alternatives)cGroup_9.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterEfCyrillicSmallLetterUCyrillicSmallLetterEnCyrillicSmallLetterKaCyrillicSmallLetterTseCyrillicSmallLetterICyrillicSmallLetterIKeyword_9_0_0 = (Keyword)cAlternatives_9_0.eContents().get(0);
		private final Keyword cEndFunctionKeyword_9_0_1 = (Keyword)cAlternatives_9_0.eContents().get(1);
		
		//Func returns x::XMethod:
		//	context=CONTEXT? => (retVal?="Функция" | retVal?="Function") name=ID "(" params=Params? ")" (public?="Экспорт" |
		//	public?="Export")? variables+=Vars* block=Block? => ("КонецФункции" | "EndFunction");
		public ParserRule getRule() { return rule; }

		//context=CONTEXT? => (retVal?="Функция" | retVal?="Function") name=ID "(" params=Params? ")" (public?="Экспорт" |
		//public?="Export")? variables+=Vars* block=Block? => ("КонецФункции" | "EndFunction")
		public Group getGroup() { return cGroup; }

		//context=CONTEXT?
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//CONTEXT
		public RuleCall getContextCONTEXTTerminalRuleCall_0_0() { return cContextCONTEXTTerminalRuleCall_0_0; }

		//=> (retVal?="Функция" | retVal?="Function")
		public Group getGroup_1() { return cGroup_1; }

		//retVal?="Функция" | retVal?="Function"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//retVal?="Функция"
		public Assignment getRetValAssignment_1_0_0() { return cRetValAssignment_1_0_0; }

		//"Функция"
		public Keyword getRetValCyrillicCapitalLetterEfCyrillicSmallLetterUCyrillicSmallLetterEnCyrillicSmallLetterKaCyrillicSmallLetterTseCyrillicSmallLetterICyrillicSmallLetterYaKeyword_1_0_0_0() { return cRetValCyrillicCapitalLetterEfCyrillicSmallLetterUCyrillicSmallLetterEnCyrillicSmallLetterKaCyrillicSmallLetterTseCyrillicSmallLetterICyrillicSmallLetterYaKeyword_1_0_0_0; }

		//retVal?="Function"
		public Assignment getRetValAssignment_1_0_1() { return cRetValAssignment_1_0_1; }

		//"Function"
		public Keyword getRetValFunctionKeyword_1_0_1_0() { return cRetValFunctionKeyword_1_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//params=Params?
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//Params
		public RuleCall getParamsParamsParserRuleCall_4_0() { return cParamsParamsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(public?="Экспорт" | public?="Export")?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//public?="Экспорт"
		public Assignment getPublicAssignment_6_0() { return cPublicAssignment_6_0; }

		//"Экспорт"
		public Keyword getPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_6_0_0() { return cPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_6_0_0; }

		//public?="Export"
		public Assignment getPublicAssignment_6_1() { return cPublicAssignment_6_1; }

		//"Export"
		public Keyword getPublicExportKeyword_6_1_0() { return cPublicExportKeyword_6_1_0; }

		//variables+=Vars*
		public Assignment getVariablesAssignment_7() { return cVariablesAssignment_7; }

		//Vars
		public RuleCall getVariablesVarsParserRuleCall_7_0() { return cVariablesVarsParserRuleCall_7_0; }

		//block=Block?
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }

		//=> ("КонецФункции" | "EndFunction")
		public Group getGroup_9() { return cGroup_9; }

		//"КонецФункции" | "EndFunction"
		public Alternatives getAlternatives_9_0() { return cAlternatives_9_0; }

		//"КонецФункции"
		public Keyword getCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterEfCyrillicSmallLetterUCyrillicSmallLetterEnCyrillicSmallLetterKaCyrillicSmallLetterTseCyrillicSmallLetterICyrillicSmallLetterIKeyword_9_0_0() { return cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterEfCyrillicSmallLetterUCyrillicSmallLetterEnCyrillicSmallLetterKaCyrillicSmallLetterTseCyrillicSmallLetterICyrillicSmallLetterIKeyword_9_0_0; }

		//"EndFunction"
		public Keyword getEndFunctionKeyword_9_0_1() { return cEndFunctionKeyword_9_0_1; }
	}

	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Params");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsParametrParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParametrParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//Params returns x::XParams:
		//	params+=Parametr ("," params+=Parametr)*;
		public ParserRule getRule() { return rule; }

		//params+=Parametr ("," params+=Parametr)*
		public Group getGroup() { return cGroup; }

		//params+=Parametr
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }

		//Parametr
		public RuleCall getParamsParametrParserRuleCall_0_0() { return cParamsParametrParserRuleCall_0_0; }

		//("," params+=Parametr)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//params+=Parametr
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//Parametr
		public RuleCall getParamsParametrParserRuleCall_1_1_0() { return cParamsParametrParserRuleCall_1_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorsXOperatorParserRuleCall_0_0 = (RuleCall)cOperatorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorsXOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block returns x::XBlock:
		//	operators+=XOperator (";" operators+=XOperator)* ";"?;
		public ParserRule getRule() { return rule; }

		//operators+=XOperator (";" operators+=XOperator)* ";"?
		public Group getGroup() { return cGroup; }

		//operators+=XOperator
		public Assignment getOperatorsAssignment_0() { return cOperatorsAssignment_0; }

		//XOperator
		public RuleCall getOperatorsXOperatorParserRuleCall_0_0() { return cOperatorsXOperatorParserRuleCall_0_0; }

		//(";" operators+=XOperator)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//operators+=XOperator
		public Assignment getOperatorsAssignment_1_1() { return cOperatorsAssignment_1_1; }

		//XOperator
		public RuleCall getOperatorsXOperatorParserRuleCall_1_1_0() { return cOperatorsXOperatorParserRuleCall_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ProcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Proc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextCONTEXTTerminalRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterTseCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterUCyrillicSmallLetterErCyrillicSmallLetterAKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cProcedureKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParamsParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPublicAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final Keyword cPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_6_0_0 = (Keyword)cPublicAssignment_6_0.eContents().get(0);
		private final Assignment cPublicAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final Keyword cPublicExportKeyword_6_1_0 = (Keyword)cPublicAssignment_6_1.eContents().get(0);
		private final Assignment cVariablesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariablesVarsParserRuleCall_7_0 = (RuleCall)cVariablesAssignment_7.eContents().get(0);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_9_0 = (Alternatives)cGroup_9.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterTseCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterUCyrillicSmallLetterErCyrillicSmallLetterYeruKeyword_9_0_0 = (Keyword)cAlternatives_9_0.eContents().get(0);
		private final Keyword cEndProcedureKeyword_9_0_1 = (Keyword)cAlternatives_9_0.eContents().get(1);
		
		//Proc returns x::XMethod:
		//	context=CONTEXT? => ("Процедура" | "Procedure") name=ID "(" params=Params? ")" (public?="Экспорт" |
		//	public?="Export")? variables+=Vars* block=Block? => ("КонецПроцедуры" | "EndProcedure");
		public ParserRule getRule() { return rule; }

		//context=CONTEXT? => ("Процедура" | "Procedure") name=ID "(" params=Params? ")" (public?="Экспорт" | public?="Export")?
		//variables+=Vars* block=Block? => ("КонецПроцедуры" | "EndProcedure")
		public Group getGroup() { return cGroup; }

		//context=CONTEXT?
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//CONTEXT
		public RuleCall getContextCONTEXTTerminalRuleCall_0_0() { return cContextCONTEXTTerminalRuleCall_0_0; }

		//=> ("Процедура" | "Procedure")
		public Group getGroup_1() { return cGroup_1; }

		//"Процедура" | "Procedure"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"Процедура"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterTseCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterUCyrillicSmallLetterErCyrillicSmallLetterAKeyword_1_0_0() { return cCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterTseCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterUCyrillicSmallLetterErCyrillicSmallLetterAKeyword_1_0_0; }

		//"Procedure"
		public Keyword getProcedureKeyword_1_0_1() { return cProcedureKeyword_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//params=Params?
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//Params
		public RuleCall getParamsParamsParserRuleCall_4_0() { return cParamsParamsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//(public?="Экспорт" | public?="Export")?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//public?="Экспорт"
		public Assignment getPublicAssignment_6_0() { return cPublicAssignment_6_0; }

		//"Экспорт"
		public Keyword getPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_6_0_0() { return cPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_6_0_0; }

		//public?="Export"
		public Assignment getPublicAssignment_6_1() { return cPublicAssignment_6_1; }

		//"Export"
		public Keyword getPublicExportKeyword_6_1_0() { return cPublicExportKeyword_6_1_0; }

		//variables+=Vars*
		public Assignment getVariablesAssignment_7() { return cVariablesAssignment_7; }

		//Vars
		public RuleCall getVariablesVarsParserRuleCall_7_0() { return cVariablesVarsParserRuleCall_7_0; }

		//block=Block?
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }

		//=> ("КонецПроцедуры" | "EndProcedure")
		public Group getGroup_9() { return cGroup_9; }

		//"КонецПроцедуры" | "EndProcedure"
		public Alternatives getAlternatives_9_0() { return cAlternatives_9_0; }

		//"КонецПроцедуры"
		public Keyword getCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterTseCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterUCyrillicSmallLetterErCyrillicSmallLetterYeruKeyword_9_0_0() { return cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterTseCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterUCyrillicSmallLetterErCyrillicSmallLetterYeruKeyword_9_0_0; }

		//"EndProcedure"
		public Keyword getEndProcedureKeyword_9_0_1() { return cEndProcedureKeyword_9_0_1; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"==";
		public ParserRule getRule() { return rule; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword() { return cEqualsSignEqualsSignKeyword; }
	}

	public class ParametrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parametr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametrAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cByValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cByValAlternatives_1_0 = (Alternatives)cByValAssignment_1.eContents().get(0);
		private final Keyword cByValCyrillicCapitalLetterZeCyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheKeyword_1_0_0 = (Keyword)cByValAlternatives_1_0.eContents().get(0);
		private final Keyword cByValByValKeyword_1_0_1 = (Keyword)cByValAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueOtherExprParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//Parametr returns x::XParam:
		//	{Parametr} byVal?=("Знач" | "ByVal")? name=ID ("=" value=OtherExpr)?;
		public ParserRule getRule() { return rule; }

		//{Parametr} byVal?=("Знач" | "ByVal")? name=ID ("=" value=OtherExpr)?
		public Group getGroup() { return cGroup; }

		//{Parametr}
		public Action getParametrAction_0() { return cParametrAction_0; }

		//byVal?=("Знач" | "ByVal")?
		public Assignment getByValAssignment_1() { return cByValAssignment_1; }

		//"Знач" | "ByVal"
		public Alternatives getByValAlternatives_1_0() { return cByValAlternatives_1_0; }

		//"Знач"
		public Keyword getByValCyrillicCapitalLetterZeCyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheKeyword_1_0_0() { return cByValCyrillicCapitalLetterZeCyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheKeyword_1_0_0; }

		//"ByVal"
		public Keyword getByValByValKeyword_1_0_1() { return cByValByValKeyword_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(=> "=" value=OtherExpr)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//value=OtherExpr
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//OtherExpr
		public RuleCall getValueOtherExprParserRuleCall_3_1_0() { return cValueOtherExprParserRuleCall_3_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	"<>" | "=";
		public ParserRule getRule() { return rule; }

		//"<>" | "="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_0() { return cLessThanSignGreaterThanSignKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPublicAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPublicAlternatives_1_0 = (Alternatives)cPublicAssignment_1.eContents().get(0);
		private final Keyword cPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_1_0_0 = (Keyword)cPublicAlternatives_1_0.eContents().get(0);
		private final Keyword cPublicExportKeyword_1_0_1 = (Keyword)cPublicAlternatives_1_0.eContents().get(1);
		
		//Variable returns x::XVariable:
		//	name=ID public?=("Экспорт" | "Export")?;
		public ParserRule getRule() { return rule; }

		//name=ID public?=("Экспорт" | "Export")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//public?=("Экспорт" | "Export")?
		public Assignment getPublicAssignment_1() { return cPublicAssignment_1; }

		//"Экспорт" | "Export"
		public Alternatives getPublicAlternatives_1_0() { return cPublicAlternatives_1_0; }

		//"Экспорт"
		public Keyword getPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_1_0_0() { return cPublicCyrillicCapitalLetterECyrillicSmallLetterKaCyrillicSmallLetterEsCyrillicSmallLetterPeCyrillicSmallLetterOCyrillicSmallLetterErCyrillicSmallLetterTeKeyword_1_0_0; }

		//"Export"
		public Keyword getPublicExportKeyword_1_0_1() { return cPublicExportKeyword_1_0_1; }
	}

	public class XOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReturnAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cReturnKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterVeCyrillicSmallLetterOCyrillicSmallLetterZeCyrillicSmallLetterVeCyrillicSmallLetterErCyrillicSmallLetterACyrillicSmallLetterTeKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueOtherExprParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRaiseAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterVeCyrillicSmallLetterYeruCyrillicSmallLetterZeCyrillicSmallLetterVeCyrillicSmallLetterACyrillicSmallLetterTeCyrillicSmallLetterSoftSignCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterYuCyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterICyrillicSmallLetterIeKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cRaiseKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueOtherExprParserRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cContinuieAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterDeCyrillicSmallLetterOCyrillicSmallLetterElCyrillicSmallLetterZheCyrillicSmallLetterICyrillicSmallLetterTeCyrillicSmallLetterSoftSignKeyword_5_1_0 = (Keyword)cAlternatives_5_1.eContents().get(0);
		private final Keyword cContinueKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBreakAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterVeCyrillicSmallLetterACyrillicSmallLetterTeCyrillicSmallLetterSoftSignKeyword_6_1_0 = (Keyword)cAlternatives_6_1.eContents().get(0);
		private final Keyword cBreakKeyword_6_1_1 = (Keyword)cAlternatives_6_1.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cGoToAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterShortICyrillicSmallLetterTeCyrillicSmallLetterIKeyword_7_1_0 = (Keyword)cAlternatives_7_1.eContents().get(0);
		private final Keyword cGoToKeyword_7_1_1 = (Keyword)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cLetParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//XOperator returns x::XOperator:
		//	Try | If | For | {Return} ("return" | "Возврат") value=OtherExpr? | {Raise} ("ВызватьИсключение" | "Raise")
		//	value=OtherExpr? | {Continuie} ("Продолжить" | "Continue") | {Break} ("Прервать" | "Break") | {GoTo} ("Перейти" |
		//	"GoTo") | Let;
		public ParserRule getRule() { return rule; }

		//Try | If | For | {Return} ("return" | "Возврат") value=OtherExpr? | {Raise} ("ВызватьИсключение" | "Raise")
		//value=OtherExpr? | {Continuie} ("Продолжить" | "Continue") | {Break} ("Прервать" | "Break") | {GoTo} ("Перейти" |
		//"GoTo") | Let
		public Alternatives getAlternatives() { return cAlternatives; }

		//Try
		public RuleCall getTryParserRuleCall_0() { return cTryParserRuleCall_0; }

		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }

		//For
		public RuleCall getForParserRuleCall_2() { return cForParserRuleCall_2; }

		//{Return} ("return" | "Возврат") value=OtherExpr?
		public Group getGroup_3() { return cGroup_3; }

		//{Return}
		public Action getReturnAction_3_0() { return cReturnAction_3_0; }

		//"return" | "Возврат"
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"return"
		public Keyword getReturnKeyword_3_1_0() { return cReturnKeyword_3_1_0; }

		//"Возврат"
		public Keyword getCyrillicCapitalLetterVeCyrillicSmallLetterOCyrillicSmallLetterZeCyrillicSmallLetterVeCyrillicSmallLetterErCyrillicSmallLetterACyrillicSmallLetterTeKeyword_3_1_1() { return cCyrillicCapitalLetterVeCyrillicSmallLetterOCyrillicSmallLetterZeCyrillicSmallLetterVeCyrillicSmallLetterErCyrillicSmallLetterACyrillicSmallLetterTeKeyword_3_1_1; }

		//value=OtherExpr?
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }

		//OtherExpr
		public RuleCall getValueOtherExprParserRuleCall_3_2_0() { return cValueOtherExprParserRuleCall_3_2_0; }

		//{Raise} ("ВызватьИсключение" | "Raise") value=OtherExpr?
		public Group getGroup_4() { return cGroup_4; }

		//{Raise}
		public Action getRaiseAction_4_0() { return cRaiseAction_4_0; }

		//"ВызватьИсключение" | "Raise"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//"ВызватьИсключение"
		public Keyword getCyrillicCapitalLetterVeCyrillicSmallLetterYeruCyrillicSmallLetterZeCyrillicSmallLetterVeCyrillicSmallLetterACyrillicSmallLetterTeCyrillicSmallLetterSoftSignCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterYuCyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterICyrillicSmallLetterIeKeyword_4_1_0() { return cCyrillicCapitalLetterVeCyrillicSmallLetterYeruCyrillicSmallLetterZeCyrillicSmallLetterVeCyrillicSmallLetterACyrillicSmallLetterTeCyrillicSmallLetterSoftSignCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterYuCyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterICyrillicSmallLetterIeKeyword_4_1_0; }

		//"Raise"
		public Keyword getRaiseKeyword_4_1_1() { return cRaiseKeyword_4_1_1; }

		//value=OtherExpr?
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }

		//OtherExpr
		public RuleCall getValueOtherExprParserRuleCall_4_2_0() { return cValueOtherExprParserRuleCall_4_2_0; }

		//{Continuie} ("Продолжить" | "Continue")
		public Group getGroup_5() { return cGroup_5; }

		//{Continuie}
		public Action getContinuieAction_5_0() { return cContinuieAction_5_0; }

		//"Продолжить" | "Continue"
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//"Продолжить"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterDeCyrillicSmallLetterOCyrillicSmallLetterElCyrillicSmallLetterZheCyrillicSmallLetterICyrillicSmallLetterTeCyrillicSmallLetterSoftSignKeyword_5_1_0() { return cCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterOCyrillicSmallLetterDeCyrillicSmallLetterOCyrillicSmallLetterElCyrillicSmallLetterZheCyrillicSmallLetterICyrillicSmallLetterTeCyrillicSmallLetterSoftSignKeyword_5_1_0; }

		//"Continue"
		public Keyword getContinueKeyword_5_1_1() { return cContinueKeyword_5_1_1; }

		//{Break} ("Прервать" | "Break")
		public Group getGroup_6() { return cGroup_6; }

		//{Break}
		public Action getBreakAction_6_0() { return cBreakAction_6_0; }

		//"Прервать" | "Break"
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//"Прервать"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterVeCyrillicSmallLetterACyrillicSmallLetterTeCyrillicSmallLetterSoftSignKeyword_6_1_0() { return cCyrillicCapitalLetterPeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterVeCyrillicSmallLetterACyrillicSmallLetterTeCyrillicSmallLetterSoftSignKeyword_6_1_0; }

		//"Break"
		public Keyword getBreakKeyword_6_1_1() { return cBreakKeyword_6_1_1; }

		//{GoTo} ("Перейти" | "GoTo")
		public Group getGroup_7() { return cGroup_7; }

		//{GoTo}
		public Action getGoToAction_7_0() { return cGoToAction_7_0; }

		//"Перейти" | "GoTo"
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }

		//"Перейти"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterShortICyrillicSmallLetterTeCyrillicSmallLetterIKeyword_7_1_0() { return cCyrillicCapitalLetterPeCyrillicSmallLetterIeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterShortICyrillicSmallLetterTeCyrillicSmallLetterIKeyword_7_1_0; }

		//"GoTo"
		public Keyword getGoToKeyword_7_1_1() { return cGoToKeyword_7_1_1; }

		//Let
		public RuleCall getLetParserRuleCall_8() { return cLetParserRuleCall_8; }
	}

	public class LetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Let");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueOtherExprParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cLetLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightLetParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Action cLetLeftAction_1_2_1 = (Action)cGroup_1_2.eContents().get(1);
		private final Assignment cParamsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cParamsFormalParamsParserRuleCall_1_2_2_0 = (RuleCall)cParamsAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_2_4 = (Group)cGroup_1_2.eContents().get(4);
		private final Group cGroup_1_2_4_0 = (Group)cGroup_1_2_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_4_0_0 = (Keyword)cGroup_1_2_4_0.eContents().get(0);
		private final Assignment cIndexAssignment_1_2_4_0_1 = (Assignment)cGroup_1_2_4_0.eContents().get(1);
		private final RuleCall cIndexOtherExprParserRuleCall_1_2_4_0_1_0 = (RuleCall)cIndexAssignment_1_2_4_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_4_0_2 = (Keyword)cGroup_1_2_4_0.eContents().get(2);
		private final Alternatives cAlternatives_1_2_5 = (Alternatives)cGroup_1_2.eContents().get(5);
		private final Group cGroup_1_2_5_0 = (Group)cAlternatives_1_2_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2_5_0_0 = (Keyword)cGroup_1_2_5_0.eContents().get(0);
		private final Assignment cValueAssignment_1_2_5_0_1 = (Assignment)cGroup_1_2_5_0.eContents().get(1);
		private final RuleCall cValueOtherExprParserRuleCall_1_2_5_0_1_0 = (RuleCall)cValueAssignment_1_2_5_0_1.eContents().get(0);
		private final Group cGroup_1_2_5_1 = (Group)cAlternatives_1_2_5.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2_5_1_0 = (Keyword)cGroup_1_2_5_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2_5_1_1 = (Assignment)cGroup_1_2_5_1.eContents().get(1);
		private final RuleCall cRightLetParserRuleCall_1_2_5_1_1_0 = (RuleCall)cRightAssignment_1_2_5_1_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_0_0 = (Group)cGroup_1_3_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_3_0_0_0 = (Keyword)cGroup_1_3_0_0.eContents().get(0);
		private final Assignment cIndexAssignment_1_3_0_0_1 = (Assignment)cGroup_1_3_0_0.eContents().get(1);
		private final RuleCall cIndexOtherExprParserRuleCall_1_3_0_0_1_0 = (RuleCall)cIndexAssignment_1_3_0_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_0_0_2 = (Keyword)cGroup_1_3_0_0.eContents().get(2);
		private final Alternatives cAlternatives_1_3_1 = (Alternatives)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_3_1_0 = (Group)cAlternatives_1_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3_1_0_0 = (Keyword)cGroup_1_3_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_3_1_0_1 = (Assignment)cGroup_1_3_1_0.eContents().get(1);
		private final RuleCall cValueOtherExprParserRuleCall_1_3_1_0_1_0 = (RuleCall)cValueAssignment_1_3_1_0_1.eContents().get(0);
		private final Group cGroup_1_3_1_1 = (Group)cAlternatives_1_3_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_3_1_1_0 = (Keyword)cGroup_1_3_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_3_1_1_1 = (Assignment)cGroup_1_3_1_1.eContents().get(1);
		private final RuleCall cRightLetParserRuleCall_1_3_1_1_1_0 = (RuleCall)cRightAssignment_1_3_1_1_1.eContents().get(0);
		
		//Let:
		//	name=ValidID ("=" value=OtherExpr | "." {Let.left=current} right=Let | "(" {Let.left=current} params=FormalParams?
		//	")" => ("[" index+=OtherExpr "]")* ("=" value=OtherExpr | "." right=Let)? | => ("[" index+=OtherExpr "]")+ ("="
		//	value=OtherExpr | "." right=Let)?);
		public ParserRule getRule() { return rule; }

		//name=ValidID ("=" value=OtherExpr | "." {Let.left=current} right=Let | "(" {Let.left=current} params=FormalParams? ")"
		//=> ("[" index+=OtherExpr "]")* ("=" value=OtherExpr | "." right=Let)? | => ("[" index+=OtherExpr "]")+ ("="
		//value=OtherExpr | "." right=Let)?)
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//=> "=" value=OtherExpr | "." {Let.left=current} right=Let | "(" {Let.left=current} params=FormalParams? ")" => ("["
		//index+=OtherExpr "]")* ("=" value=OtherExpr | "." right=Let)? | => ("[" index+=OtherExpr "]")+ ("=" value=OtherExpr |
		//"." right=Let)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> "=" value=OtherExpr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> "="
		public Keyword getEqualsSignKeyword_1_0_0() { return cEqualsSignKeyword_1_0_0; }

		//value=OtherExpr
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//OtherExpr
		public RuleCall getValueOtherExprParserRuleCall_1_0_1_0() { return cValueOtherExprParserRuleCall_1_0_1_0; }

		//=> "." {Let.left=current} right=Let
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//{Let.left=current}
		public Action getLetLeftAction_1_1_1() { return cLetLeftAction_1_1_1; }

		//right=Let
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//Let
		public RuleCall getRightLetParserRuleCall_1_1_2_0() { return cRightLetParserRuleCall_1_1_2_0; }

		//=> "(" {Let.left=current} params=FormalParams? ")" => ("[" index+=OtherExpr "]")* ("=" value=OtherExpr | "." right=Let)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }

		//{Let.left=current}
		public Action getLetLeftAction_1_2_1() { return cLetLeftAction_1_2_1; }

		//params=FormalParams?
		public Assignment getParamsAssignment_1_2_2() { return cParamsAssignment_1_2_2; }

		//FormalParams
		public RuleCall getParamsFormalParamsParserRuleCall_1_2_2_0() { return cParamsFormalParamsParserRuleCall_1_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_3() { return cRightParenthesisKeyword_1_2_3; }

		//=> ("[" index+=OtherExpr "]")*
		public Group getGroup_1_2_4() { return cGroup_1_2_4; }

		//"[" index+=OtherExpr "]"
		public Group getGroup_1_2_4_0() { return cGroup_1_2_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_4_0_0() { return cLeftSquareBracketKeyword_1_2_4_0_0; }

		//index+=OtherExpr
		public Assignment getIndexAssignment_1_2_4_0_1() { return cIndexAssignment_1_2_4_0_1; }

		//OtherExpr
		public RuleCall getIndexOtherExprParserRuleCall_1_2_4_0_1_0() { return cIndexOtherExprParserRuleCall_1_2_4_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_4_0_2() { return cRightSquareBracketKeyword_1_2_4_0_2; }

		//(=> "=" value=OtherExpr | "." right=Let)?
		public Alternatives getAlternatives_1_2_5() { return cAlternatives_1_2_5; }

		//=> "=" value=OtherExpr
		public Group getGroup_1_2_5_0() { return cGroup_1_2_5_0; }

		//=> "="
		public Keyword getEqualsSignKeyword_1_2_5_0_0() { return cEqualsSignKeyword_1_2_5_0_0; }

		//value=OtherExpr
		public Assignment getValueAssignment_1_2_5_0_1() { return cValueAssignment_1_2_5_0_1; }

		//OtherExpr
		public RuleCall getValueOtherExprParserRuleCall_1_2_5_0_1_0() { return cValueOtherExprParserRuleCall_1_2_5_0_1_0; }

		//=> "." right=Let
		public Group getGroup_1_2_5_1() { return cGroup_1_2_5_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_2_5_1_0() { return cFullStopKeyword_1_2_5_1_0; }

		//right=Let
		public Assignment getRightAssignment_1_2_5_1_1() { return cRightAssignment_1_2_5_1_1; }

		//Let
		public RuleCall getRightLetParserRuleCall_1_2_5_1_1_0() { return cRightLetParserRuleCall_1_2_5_1_1_0; }

		//=> ("[" index+=OtherExpr "]")+ ("=" value=OtherExpr | "." right=Let)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> ("[" index+=OtherExpr "]")+
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//"[" index+=OtherExpr "]"
		public Group getGroup_1_3_0_0() { return cGroup_1_3_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_3_0_0_0() { return cLeftSquareBracketKeyword_1_3_0_0_0; }

		//index+=OtherExpr
		public Assignment getIndexAssignment_1_3_0_0_1() { return cIndexAssignment_1_3_0_0_1; }

		//OtherExpr
		public RuleCall getIndexOtherExprParserRuleCall_1_3_0_0_1_0() { return cIndexOtherExprParserRuleCall_1_3_0_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3_0_0_2() { return cRightSquareBracketKeyword_1_3_0_0_2; }

		//(=> "=" value=OtherExpr | "." right=Let)?
		public Alternatives getAlternatives_1_3_1() { return cAlternatives_1_3_1; }

		//=> "=" value=OtherExpr
		public Group getGroup_1_3_1_0() { return cGroup_1_3_1_0; }

		//=> "="
		public Keyword getEqualsSignKeyword_1_3_1_0_0() { return cEqualsSignKeyword_1_3_1_0_0; }

		//value=OtherExpr
		public Assignment getValueAssignment_1_3_1_0_1() { return cValueAssignment_1_3_1_0_1; }

		//OtherExpr
		public RuleCall getValueOtherExprParserRuleCall_1_3_1_0_1_0() { return cValueOtherExprParserRuleCall_1_3_1_0_1_0; }

		//=> "." right=Let
		public Group getGroup_1_3_1_1() { return cGroup_1_3_1_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_3_1_1_0() { return cFullStopKeyword_1_3_1_1_0; }

		//right=Let
		public Assignment getRightAssignment_1_3_1_1_1() { return cRightAssignment_1_3_1_1_1; }

		//Let
		public RuleCall getRightLetParserRuleCall_1_3_1_1_1_0() { return cRightLetParserRuleCall_1_3_1_1_1_0; }
	}

	public class FormalParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalParamsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cParamsOtherExprParserRuleCall_1_0_0_0 = (RuleCall)cParamsAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cParamsOtherExprParserRuleCall_1_0_1_1_0 = (RuleCall)cParamsAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//FormalParams:
		//	{FormalParams} (params+=OtherExpr (","+ params+=OtherExpr)* | ","+);
		public ParserRule getRule() { return rule; }

		//{FormalParams} (params+=OtherExpr (","+ params+=OtherExpr)* | ","+)
		public Group getGroup() { return cGroup; }

		//{FormalParams}
		public Action getFormalParamsAction_0() { return cFormalParamsAction_0; }

		//params+=OtherExpr (","+ params+=OtherExpr)* | ","+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//params+=OtherExpr (","+ params+=OtherExpr)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//params+=OtherExpr
		public Assignment getParamsAssignment_1_0_0() { return cParamsAssignment_1_0_0; }

		//OtherExpr
		public RuleCall getParamsOtherExprParserRuleCall_1_0_0_0() { return cParamsOtherExprParserRuleCall_1_0_0_0; }

		//(=> ","+ params+=OtherExpr)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//=> ","+
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }

		//params+=OtherExpr
		public Assignment getParamsAssignment_1_0_1_1() { return cParamsAssignment_1_0_1_1; }

		//OtherExpr
		public RuleCall getParamsOtherExprParserRuleCall_1_0_1_1_0() { return cParamsOtherExprParserRuleCall_1_0_1_1_0; }

		//","+
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
	}

	public class FeatureCallIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallID");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FeatureCallID:
		//	ValidID;
		public ParserRule getRule() { return rule; }

		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0 = (Alternatives)cGroup_0_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterDeCyrillicSmallLetterElCyrillicSmallLetterYaKeyword_0_0_0_0 = (Keyword)cAlternatives_0_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_0_1 = (Keyword)cAlternatives_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_1_0 = (Group)cAlternatives_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_0_0 = (Alternatives)cGroup_0_0_1_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterKaCyrillicSmallLetterACyrillicSmallLetterZheCyrillicSmallLetterDeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterOKeyword_0_0_1_0_0_0 = (Keyword)cAlternatives_0_0_1_0_0.eContents().get(0);
		private final Keyword cEachKeyword_0_0_1_0_0_1 = (Keyword)cAlternatives_0_0_1_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_0_1_0_1 = (Assignment)cGroup_0_0_1_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_0_1_0_1_0 = (RuleCall)cNameAssignment_0_0_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_0_2 = (Alternatives)cGroup_0_0_1_0.eContents().get(2);
		private final Keyword cFromKeyword_0_0_1_0_2_0 = (Keyword)cAlternatives_0_0_1_0_2.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterICyrillicSmallLetterZeKeyword_0_0_1_0_2_1 = (Keyword)cAlternatives_0_0_1_0_2.eContents().get(1);
		private final Group cGroup_0_0_1_1 = (Group)cAlternatives_0_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_0_1_1_0 = (Assignment)cGroup_0_0_1_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_1_1_0_0 = (RuleCall)cNameAssignment_0_0_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1_1_1 = (Keyword)cGroup_0_0_1_1.eContents().get(1);
		private final Assignment cValueAssignment_0_0_1_1_2 = (Assignment)cGroup_0_0_1_1.eContents().get(2);
		private final RuleCall cValueOtherExprParserRuleCall_0_0_1_1_2_0 = (RuleCall)cValueAssignment_0_0_1_1_2.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_1_3 = (Alternatives)cGroup_0_0_1_1.eContents().get(3);
		private final Keyword cToKeyword_0_0_1_1_3_0 = (Keyword)cAlternatives_0_0_1_1_3.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterOKeyword_0_0_1_1_3_1 = (Keyword)cAlternatives_0_0_1_1_3.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cAlternatives_0.eContents().get(1);
		private final Keyword cWhileKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterKaCyrillicSmallLetterAKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cBoundaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoundaryOtherExprParserRuleCall_1_0 = (RuleCall)cBoundaryAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cCyrillicCapitalLetterTseCyrillicSmallLetterICyrillicSmallLetterKaCyrillicSmallLetterElKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cDoKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterTseCyrillicSmallLetterICyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterAKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cEndDoKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//For:
		//	(("Для" | "For") (("Каждого" | "Each") name=ID ("From" | "Из") | name=ID "=" value=OtherExpr ("To" | "По")) |
		//	("While" | "Пока")) boundary=OtherExpr ("Цикл" | "Do") block=Block? ("КонецЦикла" | "EndDo");
		public ParserRule getRule() { return rule; }

		//(("Для" | "For") (("Каждого" | "Each") name=ID ("From" | "Из") | name=ID "=" value=OtherExpr ("To" | "По")) | ("While" |
		//"Пока")) boundary=OtherExpr ("Цикл" | "Do") block=Block? ("КонецЦикла" | "EndDo")
		public Group getGroup() { return cGroup; }

		//("Для" | "For") (("Каждого" | "Each") name=ID ("From" | "Из") | name=ID "=" value=OtherExpr ("To" | "По")) | ("While" |
		//"Пока")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//("Для" | "For") (("Каждого" | "Each") name=ID ("From" | "Из") | name=ID "=" value=OtherExpr ("To" | "По"))
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"Для" | "For"
		public Alternatives getAlternatives_0_0_0() { return cAlternatives_0_0_0; }

		//"Для"
		public Keyword getCyrillicCapitalLetterDeCyrillicSmallLetterElCyrillicSmallLetterYaKeyword_0_0_0_0() { return cCyrillicCapitalLetterDeCyrillicSmallLetterElCyrillicSmallLetterYaKeyword_0_0_0_0; }

		//"For"
		public Keyword getForKeyword_0_0_0_1() { return cForKeyword_0_0_0_1; }

		//(=> "Каждого" | "Each") name=ID ("From" | "Из") | name=ID "=" value=OtherExpr ("To" | "По")
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }

		//(=> "Каждого" | "Each") name=ID ("From" | "Из")
		public Group getGroup_0_0_1_0() { return cGroup_0_0_1_0; }

		//=> "Каждого" | "Each"
		public Alternatives getAlternatives_0_0_1_0_0() { return cAlternatives_0_0_1_0_0; }

		//=> "Каждого"
		public Keyword getCyrillicCapitalLetterKaCyrillicSmallLetterACyrillicSmallLetterZheCyrillicSmallLetterDeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterOKeyword_0_0_1_0_0_0() { return cCyrillicCapitalLetterKaCyrillicSmallLetterACyrillicSmallLetterZheCyrillicSmallLetterDeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterOKeyword_0_0_1_0_0_0; }

		//"Each"
		public Keyword getEachKeyword_0_0_1_0_0_1() { return cEachKeyword_0_0_1_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_0_1_0_1() { return cNameAssignment_0_0_1_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_1_0_1_0() { return cNameIDTerminalRuleCall_0_0_1_0_1_0; }

		//"From" | "Из"
		public Alternatives getAlternatives_0_0_1_0_2() { return cAlternatives_0_0_1_0_2; }

		//"From"
		public Keyword getFromKeyword_0_0_1_0_2_0() { return cFromKeyword_0_0_1_0_2_0; }

		//"Из"
		public Keyword getCyrillicCapitalLetterICyrillicSmallLetterZeKeyword_0_0_1_0_2_1() { return cCyrillicCapitalLetterICyrillicSmallLetterZeKeyword_0_0_1_0_2_1; }

		//name=ID "=" value=OtherExpr ("To" | "По")
		public Group getGroup_0_0_1_1() { return cGroup_0_0_1_1; }

		//name=ID
		public Assignment getNameAssignment_0_0_1_1_0() { return cNameAssignment_0_0_1_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_1_1_0_0() { return cNameIDTerminalRuleCall_0_0_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_0_1_1_1() { return cEqualsSignKeyword_0_0_1_1_1; }

		//value=OtherExpr
		public Assignment getValueAssignment_0_0_1_1_2() { return cValueAssignment_0_0_1_1_2; }

		//OtherExpr
		public RuleCall getValueOtherExprParserRuleCall_0_0_1_1_2_0() { return cValueOtherExprParserRuleCall_0_0_1_1_2_0; }

		//"To" | "По"
		public Alternatives getAlternatives_0_0_1_1_3() { return cAlternatives_0_0_1_1_3; }

		//"To"
		public Keyword getToKeyword_0_0_1_1_3_0() { return cToKeyword_0_0_1_1_3_0; }

		//"По"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterOKeyword_0_0_1_1_3_1() { return cCyrillicCapitalLetterPeCyrillicSmallLetterOKeyword_0_0_1_1_3_1; }

		//"While" | "Пока"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"While"
		public Keyword getWhileKeyword_0_1_0() { return cWhileKeyword_0_1_0; }

		//"Пока"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterKaCyrillicSmallLetterAKeyword_0_1_1() { return cCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterKaCyrillicSmallLetterAKeyword_0_1_1; }

		//boundary=OtherExpr
		public Assignment getBoundaryAssignment_1() { return cBoundaryAssignment_1; }

		//OtherExpr
		public RuleCall getBoundaryOtherExprParserRuleCall_1_0() { return cBoundaryOtherExprParserRuleCall_1_0; }

		//"Цикл" | "Do"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"Цикл"
		public Keyword getCyrillicCapitalLetterTseCyrillicSmallLetterICyrillicSmallLetterKaCyrillicSmallLetterElKeyword_2_0() { return cCyrillicCapitalLetterTseCyrillicSmallLetterICyrillicSmallLetterKaCyrillicSmallLetterElKeyword_2_0; }

		//"Do"
		public Keyword getDoKeyword_2_1() { return cDoKeyword_2_1; }

		//block=Block?
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }

		//"КонецЦикла" | "EndDo"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"КонецЦикла"
		public Keyword getCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterTseCyrillicSmallLetterICyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterAKeyword_4_0() { return cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterTseCyrillicSmallLetterICyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterAKeyword_4_0; }

		//"EndDo"
		public Keyword getEndDoKeyword_4_1() { return cEndDoKeyword_4_1; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOther:
		//	"^";
		public ParserRule getRule() { return rule; }

		//"^"
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEnCyrillicSmallLetterIeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpUnary:
		//	"Not" | "Не" | "-" | "+";
		public ParserRule getRule() { return rule; }

		//"Not" | "Не" | "-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//"Не"
		public Keyword getCyrillicCapitalLetterEnCyrillicSmallLetterIeKeyword_1() { return cCyrillicCapitalLetterEnCyrillicSmallLetterIeKeyword_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//"+"
		public Keyword getPlusSignKeyword_3() { return cPlusSignKeyword_3; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterIKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAnd:
		//	"AND" | "И";
		public ParserRule getRule() { return rule; }

		//"AND" | "И"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"AND"
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }

		//"И"
		public Keyword getCyrillicCapitalLetterIKeyword_1() { return cCyrillicCapitalLetterIKeyword_1; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cORKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterICyrillicCapitalLetterElCyrillicCapitalLetterIKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpOr:
		//	"OR" | "ИЛИ";
		public ParserRule getRule() { return rule; }

		//"OR" | "ИЛИ"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"OR"
		public Keyword getORKeyword_0() { return cORKeyword_0; }

		//"ИЛИ"
		public Keyword getCyrillicCapitalLetterICyrillicCapitalLetterElCyrillicCapitalLetterIKeyword_1() { return cCyrillicCapitalLetterICyrillicCapitalLetterElCyrillicCapitalLetterIKeyword_1; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXCollectionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClosureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNumberLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDateLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXTypeLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//XLiteral returns b::XExpression:
		//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | DateLiteral |
		//	XTypeLiteral;
		public ParserRule getRule() { return rule; }

		//XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | DateLiteral |
		//XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XCollectionLiteral
		public RuleCall getXCollectionLiteralParserRuleCall_0() { return cXCollectionLiteralParserRuleCall_0; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_1() { return cXClosureParserRuleCall_1; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_2() { return cXBooleanLiteralParserRuleCall_2; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_3() { return cXNumberLiteralParserRuleCall_3; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_4() { return cXNullLiteralParserRuleCall_4; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_5() { return cXStringLiteralParserRuleCall_5; }

		//DateLiteral
		public RuleCall getDateLiteralParserRuleCall_6() { return cDateLiteralParserRuleCall_6; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_7() { return cXTypeLiteralParserRuleCall_7; }
	}

	public class DateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDATETerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DateLiteral returns XExpression:
		//	{DateLiteral} value=DATE;
		public ParserRule getRule() { return rule; }

		//{DateLiteral} value=DATE
		public Group getGroup() { return cGroup; }

		//{DateLiteral}
		public Action getDateLiteralAction_0() { return cDateLiteralAction_0; }

		//value=DATE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DATE
		public RuleCall getValueDATETerminalRuleCall_1_0() { return cValueDATETerminalRuleCall_1_0; }
	}

	public class OtherExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOtherExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cQuestionMarkLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIfAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIfOtherExprParserRuleCall_0_2_0 = (RuleCall)cIfAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cThenAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cThenOtherExprParserRuleCall_0_4_0 = (RuleCall)cThenAssignment_0_4.eContents().get(0);
		private final Keyword cCommaKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cElseAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cElseOtherExprParserRuleCall_0_6_0 = (RuleCall)cElseAssignment_0_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final RuleCall cXOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OtherExpr returns b::XExpression:
		//	{OtherExpr} "?(" if=OtherExpr => "," then=OtherExpr "," else=OtherExpr ")" | XOrExpression;
		public ParserRule getRule() { return rule; }

		//{OtherExpr} "?(" if=OtherExpr => "," then=OtherExpr "," else=OtherExpr ")" | XOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OtherExpr} "?(" if=OtherExpr => "," then=OtherExpr "," else=OtherExpr ")"
		public Group getGroup_0() { return cGroup_0; }

		//{OtherExpr}
		public Action getOtherExprAction_0_0() { return cOtherExprAction_0_0; }

		//"?("
		public Keyword getQuestionMarkLeftParenthesisKeyword_0_1() { return cQuestionMarkLeftParenthesisKeyword_0_1; }

		//if=OtherExpr
		public Assignment getIfAssignment_0_2() { return cIfAssignment_0_2; }

		//OtherExpr
		public RuleCall getIfOtherExprParserRuleCall_0_2_0() { return cIfOtherExprParserRuleCall_0_2_0; }

		//=> ","
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }

		//then=OtherExpr
		public Assignment getThenAssignment_0_4() { return cThenAssignment_0_4; }

		//OtherExpr
		public RuleCall getThenOtherExprParserRuleCall_0_4_0() { return cThenOtherExprParserRuleCall_0_4_0; }

		//","
		public Keyword getCommaKeyword_0_5() { return cCommaKeyword_0_5; }

		//else=OtherExpr
		public Assignment getElseAssignment_0_6() { return cElseAssignment_0_6; }

		//OtherExpr
		public RuleCall getElseOtherExprParserRuleCall_0_6_0() { return cElseOtherExprParserRuleCall_0_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_7() { return cRightParenthesisKeyword_0_7; }

		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall_1() { return cXOrExpressionParserRuleCall_1; }
	}

	public class XConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNewKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEnCyrillicSmallLetterOCyrillicSmallLetterVeCyrillicSmallLetterYeruCyrillicSmallLetterShortIKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstructorQualifiedNameParserRuleCall_2_0 = (RuleCall)cConstructorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitConstructorCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitConstructorCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitConstructorCallAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cArgumentsOtherExprParserRuleCall_3_1_0_0 = (RuleCall)cArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cArgumentsOtherExprParserRuleCall_3_1_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgumentsXClosureParserRuleCall_4_0 = (RuleCall)cArgumentsAssignment_4.eContents().get(0);
		
		//XConstructorCall returns XExpression:
		//	{XConstructorCall} ("new" | "Новый") constructor=QualifiedName (=> explicitConstructorCall?="(" (arguments+=OtherExpr
		//	("," arguments+=OtherExpr)*)? ")")? arguments+=XClosure?;
		public ParserRule getRule() { return rule; }

		//{XConstructorCall} ("new" | "Новый") constructor=QualifiedName (=> explicitConstructorCall?="(" (arguments+=OtherExpr
		//("," arguments+=OtherExpr)*)? ")")? arguments+=XClosure?
		public Group getGroup() { return cGroup; }

		//{XConstructorCall}
		public Action getXConstructorCallAction_0() { return cXConstructorCallAction_0; }

		//"new" | "Новый"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"new"
		public Keyword getNewKeyword_1_0() { return cNewKeyword_1_0; }

		//"Новый"
		public Keyword getCyrillicCapitalLetterEnCyrillicSmallLetterOCyrillicSmallLetterVeCyrillicSmallLetterYeruCyrillicSmallLetterShortIKeyword_1_1() { return cCyrillicCapitalLetterEnCyrillicSmallLetterOCyrillicSmallLetterVeCyrillicSmallLetterYeruCyrillicSmallLetterShortIKeyword_1_1; }

		//constructor=QualifiedName
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//QualifiedName
		public RuleCall getConstructorQualifiedNameParserRuleCall_2_0() { return cConstructorQualifiedNameParserRuleCall_2_0; }

		//(=> explicitConstructorCall?="(" (arguments+=OtherExpr ("," arguments+=OtherExpr)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> explicitConstructorCall?="("
		public Assignment getExplicitConstructorCallAssignment_3_0() { return cExplicitConstructorCallAssignment_3_0; }

		//"("
		public Keyword getExplicitConstructorCallLeftParenthesisKeyword_3_0_0() { return cExplicitConstructorCallLeftParenthesisKeyword_3_0_0; }

		//(arguments+=OtherExpr ("," arguments+=OtherExpr)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//arguments+=OtherExpr
		public Assignment getArgumentsAssignment_3_1_0() { return cArgumentsAssignment_3_1_0; }

		//OtherExpr
		public RuleCall getArgumentsOtherExprParserRuleCall_3_1_0_0() { return cArgumentsOtherExprParserRuleCall_3_1_0_0; }

		//("," arguments+=OtherExpr)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//arguments+=OtherExpr
		public Assignment getArgumentsAssignment_3_1_1_1() { return cArgumentsAssignment_3_1_1_1; }

		//OtherExpr
		public RuleCall getArgumentsOtherExprParserRuleCall_3_1_1_1_0() { return cArgumentsOtherExprParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//arguments+=XClosure?
		public Assignment getArgumentsAssignment_4() { return cArgumentsAssignment_4; }

		//XClosure
		public RuleCall getArgumentsXClosureParserRuleCall_4_0() { return cArgumentsXClosureParserRuleCall_4_0; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOtherExprParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterTeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterDeCyrillicSmallLetterAKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cThenKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0 = (Alternatives)cGroup_4_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterICyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_4_0_0_0 = (Keyword)cAlternatives_4_0_0.eContents().get(0);
		private final Keyword cElseIfKeyword_4_0_0_1 = (Keyword)cAlternatives_4_0_0.eContents().get(1);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionOtherExprParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_4_2_0 = (Alternatives)cGroup_4_2.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterTeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterDeCyrillicSmallLetterAKeyword_4_2_0_0 = (Keyword)cAlternatives_4_2_0.eContents().get(0);
		private final Keyword cThenKeyword_4_2_0_1 = (Keyword)cAlternatives_4_2_0.eContents().get(1);
		private final Assignment cBlockAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_4_3_0 = (RuleCall)cBlockAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_0_0 = (Alternatives)cGroup_5_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterICyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheCyrillicSmallLetterIeKeyword_5_0_0_0 = (Keyword)cAlternatives_5_0_0.eContents().get(0);
		private final Keyword cElseKeyword_5_0_0_1 = (Keyword)cAlternatives_5_0_0.eContents().get(1);
		private final Assignment cAlterblockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAlterblockBlockParserRuleCall_5_1_0 = (RuleCall)cAlterblockAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_6_0_0 = (Keyword)cAlternatives_6_0.eContents().get(0);
		private final Keyword cEndIfKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		
		//If:
		//	("Если" | "If") condition+=OtherExpr => ("Тогда" | "Then") block+=Block? (=> ("ИначеЕсли" | "ElseIf")
		//	condition+=OtherExpr => ("Тогда" | "Then") block+=Block?)? (=> ("Иначе" | "Else") alterblock=Block?)? => ("КонецЕсли"
		//	| "EndIf");
		public ParserRule getRule() { return rule; }

		//("Если" | "If") condition+=OtherExpr => ("Тогда" | "Then") block+=Block? (=> ("ИначеЕсли" | "ElseIf")
		//condition+=OtherExpr => ("Тогда" | "Then") block+=Block?)? (=> ("Иначе" | "Else") alterblock=Block?)? => ("КонецЕсли"
		//| "EndIf")
		public Group getGroup() { return cGroup; }

		//"Если" | "If"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"Если"
		public Keyword getCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_0_0() { return cCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_0_0; }

		//"If"
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }

		//condition+=OtherExpr
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//OtherExpr
		public RuleCall getConditionOtherExprParserRuleCall_1_0() { return cConditionOtherExprParserRuleCall_1_0; }

		//=> ("Тогда" | "Then")
		public Group getGroup_2() { return cGroup_2; }

		//"Тогда" | "Then"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"Тогда"
		public Keyword getCyrillicCapitalLetterTeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterDeCyrillicSmallLetterAKeyword_2_0_0() { return cCyrillicCapitalLetterTeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterDeCyrillicSmallLetterAKeyword_2_0_0; }

		//"Then"
		public Keyword getThenKeyword_2_0_1() { return cThenKeyword_2_0_1; }

		//block+=Block?
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }

		//(=> ("ИначеЕсли" | "ElseIf") condition+=OtherExpr => ("Тогда" | "Then") block+=Block?)?
		public Group getGroup_4() { return cGroup_4; }

		//=> ("ИначеЕсли" | "ElseIf")
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"ИначеЕсли" | "ElseIf"
		public Alternatives getAlternatives_4_0_0() { return cAlternatives_4_0_0; }

		//"ИначеЕсли"
		public Keyword getCyrillicCapitalLetterICyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_4_0_0_0() { return cCyrillicCapitalLetterICyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_4_0_0_0; }

		//"ElseIf"
		public Keyword getElseIfKeyword_4_0_0_1() { return cElseIfKeyword_4_0_0_1; }

		//condition+=OtherExpr
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }

		//OtherExpr
		public RuleCall getConditionOtherExprParserRuleCall_4_1_0() { return cConditionOtherExprParserRuleCall_4_1_0; }

		//=> ("Тогда" | "Then")
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"Тогда" | "Then"
		public Alternatives getAlternatives_4_2_0() { return cAlternatives_4_2_0; }

		//"Тогда"
		public Keyword getCyrillicCapitalLetterTeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterDeCyrillicSmallLetterAKeyword_4_2_0_0() { return cCyrillicCapitalLetterTeCyrillicSmallLetterOCyrillicSmallLetterGheCyrillicSmallLetterDeCyrillicSmallLetterAKeyword_4_2_0_0; }

		//"Then"
		public Keyword getThenKeyword_4_2_0_1() { return cThenKeyword_4_2_0_1; }

		//block+=Block?
		public Assignment getBlockAssignment_4_3() { return cBlockAssignment_4_3; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_4_3_0() { return cBlockBlockParserRuleCall_4_3_0; }

		//(=> ("Иначе" | "Else") alterblock=Block?)?
		public Group getGroup_5() { return cGroup_5; }

		//=> ("Иначе" | "Else")
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"Иначе" | "Else"
		public Alternatives getAlternatives_5_0_0() { return cAlternatives_5_0_0; }

		//"Иначе"
		public Keyword getCyrillicCapitalLetterICyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheCyrillicSmallLetterIeKeyword_5_0_0_0() { return cCyrillicCapitalLetterICyrillicSmallLetterEnCyrillicSmallLetterACyrillicSmallLetterCheCyrillicSmallLetterIeKeyword_5_0_0_0; }

		//"Else"
		public Keyword getElseKeyword_5_0_0_1() { return cElseKeyword_5_0_0_1; }

		//alterblock=Block?
		public Assignment getAlterblockAssignment_5_1() { return cAlterblockAssignment_5_1; }

		//Block
		public RuleCall getAlterblockBlockParserRuleCall_5_1_0() { return cAlterblockBlockParserRuleCall_5_1_0; }

		//=> ("КонецЕсли" | "EndIf")
		public Group getGroup_6() { return cGroup_6; }

		//"КонецЕсли" | "EndIf"
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }

		//"КонецЕсли"
		public Keyword getCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_6_0_0() { return cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterIeCyrillicSmallLetterEsCyrillicSmallLetterElCyrillicSmallLetterIKeyword_6_0_0; }

		//"EndIf"
		public Keyword getEndIfKeyword_6_0_1() { return cEndIfKeyword_6_0_1; }
	}

	public class XBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterElCyrillicSmallLetterOCyrillicSmallLetterZheCyrillicSmallLetterSoftSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cIsTrueAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cIsTrueCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterTeCyrillicSmallLetterICyrillicSmallLetterEnCyrillicSmallLetterAKeyword_1_3_0 = (Keyword)cIsTrueAssignment_1_3.eContents().get(0);
		
		//XBooleanLiteral returns XExpression:
		//	{XBooleanLiteral} ("false" | isTrue?="true" | "Ложь" | isTrue?="Истина");
		public ParserRule getRule() { return rule; }

		//{XBooleanLiteral} ("false" | isTrue?="true" | "Ложь" | isTrue?="Истина")
		public Group getGroup() { return cGroup; }

		//{XBooleanLiteral}
		public Action getXBooleanLiteralAction_0() { return cXBooleanLiteralAction_0; }

		//"false" | isTrue?="true" | "Ложь" | isTrue?="Истина"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }

		//"Ложь"
		public Keyword getCyrillicCapitalLetterElCyrillicSmallLetterOCyrillicSmallLetterZheCyrillicSmallLetterSoftSignKeyword_1_2() { return cCyrillicCapitalLetterElCyrillicSmallLetterOCyrillicSmallLetterZheCyrillicSmallLetterSoftSignKeyword_1_2; }

		//isTrue?="Истина"
		public Assignment getIsTrueAssignment_1_3() { return cIsTrueAssignment_1_3; }

		//"Истина"
		public Keyword getIsTrueCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterTeCyrillicSmallLetterICyrillicSmallLetterEnCyrillicSmallLetterAKeyword_1_3_0() { return cIsTrueCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterTeCyrillicSmallLetterICyrillicSmallLetterEnCyrillicSmallLetterAKeyword_1_3_0; }
	}

	public class TryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Try");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTryAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterYeruCyrillicSmallLetterTeCyrillicSmallLetterKaCyrillicSmallLetterAKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTryKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterYuCyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterICyrillicSmallLetterIeKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cExceptKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cAlterblockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAlterblockBlockParserRuleCall_4_0 = (RuleCall)cAlterblockAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterYeruCyrillicSmallLetterTeCyrillicSmallLetterKaCyrillicSmallLetterIKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cEndTryKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Try returns Operator:
		//	{Try} ("Попытка" | "Try") block+=Block? => ("Исключение" | "Except") alterblock+=Block? ("КонецПопытки" | "EndTry");
		public ParserRule getRule() { return rule; }

		//{Try} ("Попытка" | "Try") block+=Block? => ("Исключение" | "Except") alterblock+=Block? ("КонецПопытки" | "EndTry")
		public Group getGroup() { return cGroup; }

		//{Try}
		public Action getTryAction_0() { return cTryAction_0; }

		//"Попытка" | "Try"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"Попытка"
		public Keyword getCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterYeruCyrillicSmallLetterTeCyrillicSmallLetterKaCyrillicSmallLetterAKeyword_1_0() { return cCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterYeruCyrillicSmallLetterTeCyrillicSmallLetterKaCyrillicSmallLetterAKeyword_1_0; }

		//"Try"
		public Keyword getTryKeyword_1_1() { return cTryKeyword_1_1; }

		//block+=Block?
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }

		//=> ("Исключение" | "Except")
		public Group getGroup_3() { return cGroup_3; }

		//"Исключение" | "Except"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"Исключение"
		public Keyword getCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterYuCyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterICyrillicSmallLetterIeKeyword_3_0_0() { return cCyrillicCapitalLetterICyrillicSmallLetterEsCyrillicSmallLetterKaCyrillicSmallLetterElCyrillicSmallLetterYuCyrillicSmallLetterCheCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterICyrillicSmallLetterIeKeyword_3_0_0; }

		//"Except"
		public Keyword getExceptKeyword_3_0_1() { return cExceptKeyword_3_0_1; }

		//alterblock+=Block?
		public Assignment getAlterblockAssignment_4() { return cAlterblockAssignment_4; }

		//Block
		public RuleCall getAlterblockBlockParserRuleCall_4_0() { return cAlterblockBlockParserRuleCall_4_0; }

		//"КонецПопытки" | "EndTry"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"КонецПопытки"
		public Keyword getCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterYeruCyrillicSmallLetterTeCyrillicSmallLetterKaCyrillicSmallLetterIKeyword_5_0() { return cCyrillicCapitalLetterKaCyrillicSmallLetterOCyrillicSmallLetterEnCyrillicSmallLetterIeCyrillicSmallLetterTseCyrillicCapitalLetterPeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterYeruCyrillicSmallLetterTeCyrillicSmallLetterKaCyrillicSmallLetterIKeyword_5_0; }

		//"EndTry"
		public Keyword getEndTryKeyword_5_1() { return cEndTryKeyword_5_1; }
	}

	public class XNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNullLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUndefinedLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCyrillicCapitalLetterEnCyrillicSmallLetterIeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterIeCyrillicSmallLetterElCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterOKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUndefinedLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cUndefinedKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cXNullLiteralLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNullKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//XNullLiteral returns XExpression:
		//	{UndefinedLiteral} "Неопределено" | {UndefinedLiteral} "Undefined" | {XNullLiteralLiteral} "Null";
		public ParserRule getRule() { return rule; }

		//{UndefinedLiteral} "Неопределено" | {UndefinedLiteral} "Undefined" | {XNullLiteralLiteral} "Null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UndefinedLiteral} "Неопределено"
		public Group getGroup_0() { return cGroup_0; }

		//{UndefinedLiteral}
		public Action getUndefinedLiteralAction_0_0() { return cUndefinedLiteralAction_0_0; }

		//"Неопределено"
		public Keyword getCyrillicCapitalLetterEnCyrillicSmallLetterIeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterIeCyrillicSmallLetterElCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterOKeyword_0_1() { return cCyrillicCapitalLetterEnCyrillicSmallLetterIeCyrillicSmallLetterOCyrillicSmallLetterPeCyrillicSmallLetterErCyrillicSmallLetterIeCyrillicSmallLetterDeCyrillicSmallLetterIeCyrillicSmallLetterElCyrillicSmallLetterIeCyrillicSmallLetterEnCyrillicSmallLetterOKeyword_0_1; }

		//{UndefinedLiteral} "Undefined"
		public Group getGroup_1() { return cGroup_1; }

		//{UndefinedLiteral}
		public Action getUndefinedLiteralAction_1_0() { return cUndefinedLiteralAction_1_0; }

		//"Undefined"
		public Keyword getUndefinedKeyword_1_1() { return cUndefinedKeyword_1_1; }

		//{XNullLiteralLiteral} "Null"
		public Group getGroup_2() { return cGroup_2; }

		//{XNullLiteralLiteral}
		public Action getXNullLiteralLiteralAction_2_0() { return cXNullLiteralLiteralAction_2_0; }

		//"Null"
		public Keyword getNullKeyword_2_1() { return cNullKeyword_2_1; }
	}
	
	
	private final ModuleElements pModule;
	private final VarsElements pVars;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBOM;
	private final TerminalRule tCONTEXT;
	private final TerminalRule tID;
	private final TerminalRule tDATE;
	private final TerminalRule tNUMERIC;
	private final TerminalRule tPREPROCESSOR;
	private final TerminalRule tSTRING;
	private final XMethodElements pXMethod;
	private final FuncElements pFunc;
	private final ParamsElements pParams;
	private final BlockElements pBlock;
	private final ProcElements pProc;
	private final OpSingleAssignElements pOpSingleAssign;
	private final ParametrElements pParametr;
	private final OpEqualityElements pOpEquality;
	private final VariableElements pVariable;
	private final XOperatorElements pXOperator;
	private final LetElements pLet;
	private final FormalParamsElements pFormalParams;
	private final FeatureCallIDElements pFeatureCallID;
	private final ForElements pFor;
	private final OpOtherElements pOpOther;
	private final OpUnaryElements pOpUnary;
	private final OpAndElements pOpAnd;
	private final OpOrElements pOpOr;
	private final XLiteralElements pXLiteral;
	private final DateLiteralElements pDateLiteral;
	private final OtherExprElements pOtherExpr;
	private final XConstructorCallElements pXConstructorCall;
	private final IfElements pIf;
	private final XBooleanLiteralElements pXBooleanLiteral;
	private final TryElements pTry;
	private final XNullLiteralElements pXNullLiteral;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public OneCGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pModule = new ModuleElements();
		this.pVars = new VarsElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT");
		this.tBOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOM");
		this.tCONTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONTEXT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE");
		this.tNUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC");
		this.tPREPROCESSOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PREPROCESSOR");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.pXMethod = new XMethodElements();
		this.pFunc = new FuncElements();
		this.pParams = new ParamsElements();
		this.pBlock = new BlockElements();
		this.pProc = new ProcElements();
		this.pOpSingleAssign = new OpSingleAssignElements();
		this.pParametr = new ParametrElements();
		this.pOpEquality = new OpEqualityElements();
		this.pVariable = new VariableElements();
		this.pXOperator = new XOperatorElements();
		this.pLet = new LetElements();
		this.pFormalParams = new FormalParamsElements();
		this.pFeatureCallID = new FeatureCallIDElements();
		this.pFor = new ForElements();
		this.pOpOther = new OpOtherElements();
		this.pOpUnary = new OpUnaryElements();
		this.pOpAnd = new OpAndElements();
		this.pOpOr = new OpOrElements();
		this.pXLiteral = new XLiteralElements();
		this.pDateLiteral = new DateLiteralElements();
		this.pOtherExpr = new OtherExprElements();
		this.pXConstructorCall = new XConstructorCallElements();
		this.pIf = new IfElements();
		this.pXBooleanLiteral = new XBooleanLiteralElements();
		this.pTry = new TryElements();
		this.pXNullLiteral = new XNullLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.onec.OneC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Module returns x::XModule:
	//	{XModule} BOM? variables+=Vars* methods+=XMethod* block=Block?;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Vars returns x::XVariables:
	//	context=CONTEXT? => ("Перем" | "Var") variables+=Variable ("," variables+=Variable)* ";"?;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	////terminal COMMA: ',';
	//terminal BOM:
	//	"﻿";
	public TerminalRule getBOMRule() {
		return tBOM;
	} 

	//terminal CONTEXT:
	//	"&" ID;
	public TerminalRule getCONTEXTRule() {
		return tCONTEXT;
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "А".."Я" | "Ё" | "а".."я" | "ё") ("a".."z" | "A".."Z" | "_" | "А".."Я" | "Ё" | "а".."я"
	//	| "ё" | "0".."9")* | "?";
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal DATE:
	//	"\'" DIGIT DIGIT DIGIT DIGIT "."? DIGIT DIGIT "."? DIGIT DIGIT " "? (DIGIT DIGIT ":"? DIGIT DIGIT ":"? DIGIT DIGIT)?
	//	"\'";
	public TerminalRule getDATERule() {
		return tDATE;
	} 

	//terminal NUMERIC:
	//	("+" | "-")? INT ("." INT);
	public TerminalRule getNUMERICRule() {
		return tNUMERIC;
	} 

	////terminal SC: ';';
	//terminal PREPROCESSOR:
	//	"#" ID->"\n" | "#" ID EOF;
	public TerminalRule getPREPROCESSORRule() {
		return tPREPROCESSOR;
	} 

	//terminal STRING:
	//	"\""->"\"" ("\""->"\"")*;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//XMethod returns x::XMethod:
	//	Func | Proc;
	public XMethodElements getXMethodAccess() {
		return pXMethod;
	}
	
	public ParserRule getXMethodRule() {
		return getXMethodAccess().getRule();
	}

	//Func returns x::XMethod:
	//	context=CONTEXT? => (retVal?="Функция" | retVal?="Function") name=ID "(" params=Params? ")" (public?="Экспорт" |
	//	public?="Export")? variables+=Vars* block=Block? => ("КонецФункции" | "EndFunction");
	public FuncElements getFuncAccess() {
		return pFunc;
	}
	
	public ParserRule getFuncRule() {
		return getFuncAccess().getRule();
	}

	//Params returns x::XParams:
	//	params+=Parametr ("," params+=Parametr)*;
	public ParamsElements getParamsAccess() {
		return pParams;
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}

	//Block returns x::XBlock:
	//	operators+=XOperator (";" operators+=XOperator)* ";"?;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Proc returns x::XMethod:
	//	context=CONTEXT? => ("Процедура" | "Procedure") name=ID "(" params=Params? ")" (public?="Экспорт" |
	//	public?="Export")? variables+=Vars* block=Block? => ("КонецПроцедуры" | "EndProcedure");
	public ProcElements getProcAccess() {
		return pProc;
	}
	
	public ParserRule getProcRule() {
		return getProcAccess().getRule();
	}

	//OpSingleAssign:
	//	"==";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return pOpSingleAssign;
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//Parametr returns x::XParam:
	//	{Parametr} byVal?=("Знач" | "ByVal")? name=ID ("=" value=OtherExpr)?;
	public ParametrElements getParametrAccess() {
		return pParametr;
	}
	
	public ParserRule getParametrRule() {
		return getParametrAccess().getRule();
	}

	//OpEquality:
	//	"<>" | "=";
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//Variable returns x::XVariable:
	//	name=ID public?=("Экспорт" | "Export")?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//XOperator returns x::XOperator:
	//	Try | If | For | {Return} ("return" | "Возврат") value=OtherExpr? | {Raise} ("ВызватьИсключение" | "Raise")
	//	value=OtherExpr? | {Continuie} ("Продолжить" | "Continue") | {Break} ("Прервать" | "Break") | {GoTo} ("Перейти" |
	//	"GoTo") | Let;
	public XOperatorElements getXOperatorAccess() {
		return pXOperator;
	}
	
	public ParserRule getXOperatorRule() {
		return getXOperatorAccess().getRule();
	}

	//Let:
	//	name=ValidID ("=" value=OtherExpr | "." {Let.left=current} right=Let | "(" {Let.left=current} params=FormalParams?
	//	")" => ("[" index+=OtherExpr "]")* ("=" value=OtherExpr | "." right=Let)? | => ("[" index+=OtherExpr "]")+ ("="
	//	value=OtherExpr | "." right=Let)?);
	public LetElements getLetAccess() {
		return pLet;
	}
	
	public ParserRule getLetRule() {
		return getLetAccess().getRule();
	}

	//FormalParams:
	//	{FormalParams} (params+=OtherExpr (","+ params+=OtherExpr)* | ","+);
	public FormalParamsElements getFormalParamsAccess() {
		return pFormalParams;
	}
	
	public ParserRule getFormalParamsRule() {
		return getFormalParamsAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID;
	public FeatureCallIDElements getFeatureCallIDAccess() {
		return pFeatureCallID;
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//For:
	//	(("Для" | "For") (("Каждого" | "Each") name=ID ("From" | "Из") | name=ID "=" value=OtherExpr ("To" | "По")) |
	//	("While" | "Пока")) boundary=OtherExpr ("Цикл" | "Do") block=Block? ("КонецЦикла" | "EndDo");
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//OpOther:
	//	"^";
	public OpOtherElements getOpOtherAccess() {
		return pOpOther;
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//OpUnary:
	//	"Not" | "Не" | "-" | "+";
	public OpUnaryElements getOpUnaryAccess() {
		return pOpUnary;
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//OpAnd:
	//	"AND" | "И";
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//OpOr:
	//	"OR" | "ИЛИ";
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XLiteral returns b::XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | DateLiteral |
	//	XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return pXLiteral;
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//DateLiteral returns XExpression:
	//	{DateLiteral} value=DATE;
	public DateLiteralElements getDateLiteralAccess() {
		return pDateLiteral;
	}
	
	public ParserRule getDateLiteralRule() {
		return getDateLiteralAccess().getRule();
	}

	//OtherExpr returns b::XExpression:
	//	{OtherExpr} "?(" if=OtherExpr => "," then=OtherExpr "," else=OtherExpr ")" | XOrExpression;
	public OtherExprElements getOtherExprAccess() {
		return pOtherExpr;
	}
	
	public ParserRule getOtherExprRule() {
		return getOtherExprAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} ("new" | "Новый") constructor=QualifiedName (=> explicitConstructorCall?="(" (arguments+=OtherExpr
	//	("," arguments+=OtherExpr)*)? ")")? arguments+=XClosure?;
	public XConstructorCallElements getXConstructorCallAccess() {
		return pXConstructorCall;
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//If:
	//	("Если" | "If") condition+=OtherExpr => ("Тогда" | "Then") block+=Block? (=> ("ИначеЕсли" | "ElseIf")
	//	condition+=OtherExpr => ("Тогда" | "Then") block+=Block?)? (=> ("Иначе" | "Else") alterblock=Block?)? => ("КонецЕсли"
	//	| "EndIf");
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true" | "Ложь" | isTrue?="Истина");
	public XBooleanLiteralElements getXBooleanLiteralAccess() {
		return pXBooleanLiteral;
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//Try returns Operator:
	//	{Try} ("Попытка" | "Try") block+=Block? => ("Исключение" | "Except") alterblock+=Block? ("КонецПопытки" | "EndTry");
	public TryElements getTryAccess() {
		return pTry;
	}
	
	public ParserRule getTryRule() {
		return getTryAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{UndefinedLiteral} "Неопределено" | {UndefinedLiteral} "Undefined" | {XNullLiteralLiteral} "Null";
	public XNullLiteralElements getXNullLiteralAccess() {
		return pXNullLiteral;
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
